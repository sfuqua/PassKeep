// Copyright 2017 Steven Fuqua
// This file is part of PassKeep and is licensed under the GNU GPL v3.
// For the full license, see gpl-3.0.md in this solution or under https://bitbucket.org/sapph/passkeep/src

using PassKeep.Lib.Contracts.KeePass;
using SariphLib.Diagnostics;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Security.Cryptography.Core;
using Windows.Storage.Streams;

namespace PassKeep.Lib.KeePass.SecurityTokens
{
    /// <summary>
    /// Helper class for dealing with key transformation.
    /// </summary>
    public static class KeyHelper
    {
        /// <summary>
        /// The KeePass raw k is 32 bytes generated by the SHA-256 hash of the
        /// concatenation of all user security data.
        /// </summary>
        /// <param name="tokens">The security tokens being used to generate the raw key.</param>
        /// <returns>A 32 byte buffer to use as an encryption k</returns>
        public static async Task<IBuffer> GetRawKey(IEnumerable<ISecurityToken> tokens)
        {
            DebugHelper.Assert(tokens != null);
            if (tokens == null)
            {
                throw new ArgumentNullException(nameof(tokens));
            }

            var sha256 = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha256);
            CryptographicHash hash = sha256.CreateHash();

            foreach (ISecurityToken token in tokens)
            {
                hash.Append(await token.GetBufferAsync());
            }

            IBuffer rawKey = hash.GetValueAndReset();
            return rawKey;
        }
    }
}
