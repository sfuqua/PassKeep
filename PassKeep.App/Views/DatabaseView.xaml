<view:DatabaseViewBase
    x:Name="pageRoot"
    x:Class="PassKeep.Views.DatabaseView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:PassKeep.Views"
    xmlns:controls="using:PassKeep.Views.Controls"
    xmlns:view="using:PassKeep.ViewBases"
    xmlns:common="using:PassKeep.Common"
    xmlns:convert="using:PassKeep.Converters"
    xmlns:dvm="using:PassKeep.ViewModels.DesignTime"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <d:Page.DataContext>
        <dvm:DesignDatabaseViewModel />
    </d:Page.DataContext>

    <view:DatabaseViewBase.Resources>
        <Flyout x:Key="nodeRenameFlyout" Placement="Bottom" Closed="{x:Bind RenameFlyout_Closed}">
            <TextBox KeyUp="{x:Bind NodeRenameBox_KeyUp}" />
        </Flyout>
    </view:DatabaseViewBase.Resources>

    <RelativePanel x:Name="contentFrame" Margin="4">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <!-- Move ASB to bottom of page when viewport is narrow -->
                <VisualState x:Name="Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="searchBox.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="searchBox.(RelativePanel.AlignBottomWithPanel)" Value="True" />
                        <Setter Target="childGridView.(RelativePanel.Above)" Value="searchBox" />
                        <Setter Target="searchBox.Margin" Value="0, 6, 0 ,0" />
                    </VisualState.Setters>
                </VisualState>
                
                <!-- Move searchbox to top in the standard view -->
                <VisualState x:Name="Standard">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="481" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="childGridView.(RelativePanel.Below)" Value="searchBox" />
                        <Setter Target="childGridView.(RelativePanel.AlignBottomWithPanel)" Value="True" />
                        <Setter Target="searchBox.Width" Value="248" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        
        <AutoSuggestBox x:Name="searchBox" x:Uid="SearchBox"
                   RelativePanel.AlignRightWithPanel="True"
                   SuggestionChosen="SearchBox_SuggestionChosen"
                   QuerySubmitted="SearchBox_QuerySubmitted"
                   TextChanged="SearchBox_QueryChanged">
            <AutoSuggestBox.QueryIcon>
                <SymbolIcon Symbol="Find" />
            </AutoSuggestBox.QueryIcon>
        </AutoSuggestBox>

        <!-- Main GridView -->
        <GridView x:Name="childGridView"
                  RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True"
                  Margin="0,8,0,0"
                  ItemsSource="{x:Bind ViewModel.SortedChildren, Mode=OneWay}"
                  ItemTemplateSelector="{StaticResource NodeTemplateSelector}"
                  IsItemClickEnabled="True"
                  ItemClick="ChildGridView_ItemClick"
                  CanDragItems="{Binding PersistenceService.CanSave}"
                  DragItemsStarting="childGridView_DragItemsStarting" DragItemsCompleted="childGridView_DragItemsCompleted"
                  SelectionMode="None">
            <GridView.ItemContainerTransitions>
                <TransitionCollection>
                    <EntranceThemeTransition />
                    <AddDeleteThemeTransition />
                </TransitionCollection>
            </GridView.ItemContainerTransitions>
        </GridView>

        <!-- Since ItemsSource is an object and casting to a generic ICollection is cumbersome, using {Binding} here -->
        <Grid Visibility="{Binding ItemsSource.Count, ElementName=childGridView, Converter={StaticResource ItemCountToEmptyLabelVisibilityConverter}}"
              RelativePanel.Below="searchBox" RelativePanel.AlignHorizontalCenterWithPanel="True"
			  Margin="0,20,0,0">
            <TextBlock x:Name="emptyFolderMessage" x:Uid="EmptyFolder" Style="{StaticResource BodyTextBlockStyle}"
                       Visibility="{x:Bind ViewModel.Filter, Mode=OneWay, Converter={StaticResource EmptyStringToVisibilityConverter}}" />
            <TextBlock x:Uid="NoSearchResults" Style="{StaticResource BodyTextBlockStyle}"
                       Visibility="{Binding Visibility, Mode=OneWay, Converter={StaticResource VisibilityNegationConverter}, ElementName=emptyFolderMessage}" />
        </Grid>
    </RelativePanel>

    <view:DatabaseViewBase.BottomAppBar>
        <CommandBar DataContext="{x:Bind}">
            <CommandBar.ContentTransitions>
                <TransitionCollection>

                </TransitionCollection>
            </CommandBar.ContentTransitions>

            <CommandBar.PrimaryCommands>
                <AppBarButton x:Uid="Edit" Icon="Edit"
                              IsEnabled="{Binding ChildGridView.SelectedItem, Converter={StaticResource ExistenceToBooleanConverter}}"
                              Visibility="{Binding IsSelectionMode, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=selectionButton}">
                    
                    <AppBarButton.Flyout>
                        <MenuFlyout>
                            <MenuFlyout.Items>
                                <MenuFlyoutItem x:Uid="Rename"
                                                Click="{x:Bind PromptToRenameSelection}" />
                                <MenuFlyoutItem x:Uid="Details"
                                                Click="{x:Bind EditSelection}" />
                            </MenuFlyout.Items>
                        </MenuFlyout>
                    </AppBarButton.Flyout>
                </AppBarButton>

                <AppBarButton x:Uid="Delete" Icon="Delete"
                              IsEnabled="{Binding ChildGridView.SelectedItem, Converter={StaticResource ExistenceToBooleanConverter}}"
                              Visibility="{Binding IsSelectionMode, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay, ElementName=selectionButton}"
                              Click="{x:Bind PromptToDeleteSelection}" />

                <AppBarButton x:Uid="SortMode" Icon="Sort"
                              Visibility="{x:Bind selectionButton.IsSelectionMode, Converter={StaticResource NegatedBooleanToVisibilityConverter}, Mode=OneWay}">
                    <AppBarButton.Flyout>
                        <MenuFlyout x:Name="sortModeFlyout" />
                    </AppBarButton.Flyout>
                </AppBarButton>
                
                <AppBarButton x:Uid="Create" Icon="Add"
                              Visibility="{Binding ViewModel.PersistenceService.CanSave, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <AppBarButton.Flyout>
                        <MenuFlyout>
                            <MenuFlyout.Items>
                                <MenuFlyoutItem x:Uid="NewEntry"
                                                Click="{x:Bind CreateEntry}" />
                                <MenuFlyoutItem x:Uid="NewGroup"
                                                Click="{x:Bind CreateGroup}" />
                            </MenuFlyout.Items>
                        </MenuFlyout>
                    </AppBarButton.Flyout>
                </AppBarButton>

                <controls:SelectionModeAppBarButton x:Name="selectionButton"
                                                    ListView="{x:Bind childGridView}"
                                                    SelectionMode="Single"
                                                    Visibility="{Binding ViewModel.PersistenceService.CanSave, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </CommandBar.PrimaryCommands>
        </CommandBar>
    </view:DatabaseViewBase.BottomAppBar>
</view:DatabaseViewBase>
